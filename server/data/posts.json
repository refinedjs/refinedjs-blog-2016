{
	"posts" : [
		{
			"id" : "bind-to-controller",
			"title" : "Using BindToController - Why this is so damn useful?",
			"created_date" : 1463702400,
			"page_title" : "Using BindToController - Why this is so damn useful?",
			"meta_desc" : "BindToController allows you to bind the components properties directly to controller rather than the isolated $scope of the component. This is a huge win for component development!",
			"tags" : [ "AngularJS", "Components", "Directives", "Javascript" ],
			"page_url" : "/posts/5-20-2016/bind-to-controller",
			"page_identifier" : "bind-to-controller",
			"author" : "Josh Gonzalez",
			"author_url" : "/contributors#josh",
			"post" : "<p><code>BindToController</code> allows you to bind the components properties directly to <code>Controller</code> rather than the <code>isolated $scope</code> of the component. This is a huge win for component development! The Controller of the component now has the ability to be decoupled from the component <code>isolated $scope</code>. There is now no reason to have a messy mixing of <code>$scope</code> and the context of the Controller. </p><p>Before we get into the code, this is how Angular defines the <code>BindToController</code> property:</p><blockquote>\"<a rel=\"_blank\" href=\"https://docs.angularjs.org/api/ng/service/$compile\">BindToController</a>\" - This property is used to bind scope properties directly to the Controller. It can be either true or an object hash with the same format as the scope property. Additionally, a controller alias must be set, either by using controllerAs: 'myAlias' or by specifying the alias in the controller definition: controller: 'myCtrl as myAlias'.</blockquote><p>Ok, so what exactly does this mean? This means that we can remove the passing and binding of <code>$scope</code> through out our <code>controller/directive</code>. </p><hr/><h3>The Messy Way</h3><p>Below is an example of this <em>(working example can be found here -> <a rel=\"_blank\" href=\"http://codepen.io/refinedjs/pen/dMBLqb/?editors=1011\">Code Pen</a>)</em>.</p><code data-gist-id=\"1fb1731c3c9f362d63c1049127210f44\" data-gist-show-spinner=\"true\"></code><hr/><h3>The Refined Way</h3><p>To clean up the code above and to make more sense of what we are using we will incorporate the <code>BindToController</code> property. The <code>BindToController</code> property can be either a True/False or an object hash. Also, the <code>ControllerAs</code> property must be set in order to use <code>BindToController</code>. With these two properties set, we can now have Angular bind the given properties to the controller rather the <code>$scope</code>.</p><p>In our example, we will be using a object hash, by using the hash, this tells Angular to set up bindings to the controller directly. <strong>**One important thing to note:</strong> If <code>BindToController</code> and <code>$scope</code> are both defined with object hashes, <code>BindToController</code> will override the components <code>$scope</code>.</p><p>Below you can see this in action <em>(working example can be found here -> <a rel=\"_blank\" href=\"http://codepen.io/refinedjs/pen/ONeYJm?editors=1011\">Code Pen</a>)</em>.\t\t</p><code data-gist-id=\"46a1eefa119c2d550b1c5413f8a2646b\" data-gist-show-spinner=\"true\"></code><p>As you can see from the code example above that <code>BindToController</code> makes it an easier and more elegant option when using Controllers in Directives/Components. This is a fairly basic example; however, it gives good insight into the property as a whole. Please comment any suggestions or better ways to use the <code>BindToController</code> property.  </p>",
			"blurb" : "BindToController allows you to bind the components properties directly to controller rather than the isolated $scope of the component. This is a huge win for component development! The controller of the component now has the ability to be decoupled"
		},
		{
			"id" : "angular-validators",
			"title" : "Using NgModelController $validators and $asyncValidators to validate form fields",
			"created_date" : 1461974400,
			"page_title" : "Using NgModelController $validators and $asyncValidators to validate form fields",
			"meta_desc" : "The most common way to validate form fields in angular is to look at $valid and $invalid on the fields. But what if that is not enough and you want to create special validation for your fields (i.e. validating an email against a regex or make a call to the server to validate a value)?",
			"tags" : [ "AngularJS", "Validation", "Javascript" ],
			"page_url" : "/posts/5-20-2016/angular-validators",
			"page_identifier" : "angular-validators",
			"author" : "Yakira Bristol",
			"author_url" : "/contributors#yarkira",
			"post" : "<p>In validating form input fields, we wanted to create a directive that would handle the validation of an email. The most common way to do this would be to look at $valid and $invalid on the field. But what if that is not enough and you want to validate an email against a regex or make a call to the server to validate a value? When you use NgModel on a directive, NgModelController has collection of validators called $validators that can be used to create your custom field validations. </p><p>This can be accessed in the link function and set for the field you would like to validate.</p><code data-gist-id=\"f71e72bc81f7382843f099afba677164\" data-gist-show-spinner=\"true\"></code><p>What if you needed to make that call to the server to validate? You would use asyncValidators.</p><code data-gist-id=\"d5b9d402e7a2d9ab88853e1c78e5b5cb\" data-gist-show-spinner=\"true\"></code><p>One caveat is that every time you type in the input, the call to the server is being made. To alleviate this use ng-model-options to update the behavior of the validation. \t\t\t</p><p>These can be set on the field:</p><code data-gist-id=\"638367bd374f55b9d8f372aa697d2e71\" data-gist-show-spinner=\"true\"></code><p>What these options say is that we want to update on default, update on blur, set the debounce default to 300 ms and blur. The really important part here is debounce. What debounce says is that we only want the validation to occur if no input has been entered after 300ms or a blur occurs on the input field. This allows the user to keep typing without being interrupted with validation errors and we make fewer calls to the server for validation.</p><p>These can also be added in the link function.\t\t\t</p><code data-gist-id=\"bfcdee582b2bad79452679f7a9b6988e\" data-gist-show-spinner=\"true\"></code><p>It is preferable to set default options in the link function and allow anyone using your directive to set their own options on the input field.\t\t\t</p><code data-gist-id=\"900ff593b3ca2d74443b1c2f54d10a2b\" data-gist-show-spinner=\"true\"></code><p>angular.merge performs a deep copy of the object as apposed to angular.extend which performs a shallow copy of the object. We will discuss the different functions on angular in a future post.</p><p>Now that we have your custom validation in place for an email, we can create more and add them to the $validators or $asycValidators property. Maybe we want to have a unique email validator or put validation on a password. That can all be done by adding them to the appropriate property on NgModelController.</p><p>How do you validate form fields? Let us know in the comments below.</p>",
			"blurb" : "The most common way to validate form fields in angular is to look at $valid and $invalid on the fields. But what if that is not enough and you want to create special validation for your fields (i.e. validating an email against a regex or make a call to the server to validate a value)? NgModelController has collection of validators called $validators and $asyncValidators that can be used to create your custom field validations"
		}		
	]
}