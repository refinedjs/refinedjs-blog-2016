doctype html
html(lang="en")
	//// Start the head //
	head
		include ./_inc/head.pug
	body
		// Start the navigation //
		include ./_inc/nav.pug
		////home page header//
		header.intro-header
			div.container-fluid
				div.row
					div.col-lg-8.col-lg-offset-2.col-md-10.col-md-offset-1
						div.site-heading
							h1 Refined Js
							hr.small
							span.subheading The Pursuit To Refined Javascript
		////Start listing of blog entries//
		div.container-fluid
			div.row
				div.col-lg-8.col-lg-offset-2.col-md-10.col-md-offset-1

					////**************Start testing-ui Post**************////
					div.post-preview
						////Start the header//
						a(href="/posts/10-30-2016/testing-ui")
							h2.post-title Do You Write Tests For Your UI?
						p.post-meta By 
								a(href="/contributors#yakira") Yakira Bristol 
								|| October 30th, 2016
						hr
						h3.post-subtitle Functional testing is great. It is super helpful, but in a way, not enough. When you are dealing with a huge product with code changes that impact multiple areas of the product, that brings up a lot of questions. With reusable components, how do you know that the changes did not negatively impact the interaction of one component with another? How do you know that the button to activate the interaction not longer works? 
						p.post-meta-details
							i.fa.fa-tags
							| 
							a(href="/tags/angularjs") AngularJS
							|, 
							a(href="/tags/coding") Coding
							|, 
							a(href="/tags/testing") Testing
							|, 
							a(href="/tags/javascript") Javascript
						p.post-meta-details
							i.fa.fa-comments
							| 
							a(href="http://refinedjs.io/posts/10-30-2016/testing-ui#disqus_thread") 
							a.pull-right(href="/posts/10-30-2016/testing-ui")
								span read more...
					////**************End testing-ui Post************//

					////**************Start deep-copy-objects Post**************////
					div.post-preview
						////Start the header//
						a(href="/posts/6-04-2016/deep-copy-objects")
							h2.post-title In Too Deep? - Deep Copying Objects in Angular
						p.post-meta By 
								a(href="/contributors#yakira") Yakira Bristol 
								|| June 4th, 2016
						hr
						h3.post-subtitle With jQuery, we learned to copy objects using <code>jQuery.extend()</code>. What if we want to do this in Angular, in which using jQuery should be avoided? Angular has a function that can be used, like <code>jQuery.extend()</code>, called <code>angular.extend()</code>. But that just scratches the surface... 
						p.post-meta-details
							i.fa.fa-tags
							| 
							a(href="/tags/angularjs") AngularJS
							|, 
							a(href="/tags/objects") Objects
							|, 
							a(href="/tags/functions") Functions
							|, 
							a(href="/tags/javascript") Javascript
						p.post-meta-details
							i.fa.fa-comments
							| 
							a(href="http://refinedjs.io/posts/6-4-2016/deep-copy-objects#disqus_thread") 
							a.pull-right(href="/posts/6-4-2016/deep-copy-objects")
								span read more...
					////**************End deep-copy-objects Post************//
					
					////**************Start bind-to-controller Post**************////
					div.post-preview
						////Start the header//
						a(href="/posts/5-20-2016/bind-to-controller")
							h2.post-title BindToController - Why this is so damn useful?
						p.post-meta By 
								a(href="/contributors#josh") Joshua Gonzalez 
								|| May 20th, 2016
						hr
						h3.post-subtitle <code>BindToController</code> allows you to bind the components properties directly to controller rather than the <code>isolated $scope</code> of the component. This is a huge win for component development! The controller of the component now has the ability to be decoupled...
						p.post-meta-details
							i.fa.fa-tags
							| 
							a(href="/tags/angularjs") AngularJS
							|, 
							a(href="/tags/components") Components
							|, 
							a(href="/tags/javascript") Javascript
						p.post-meta-details
							i.fa.fa-comments
							| 
							a(href="http://refinedjs.io/posts/5-20-2016/bind-to-controller#disqus_thread") 
							a.pull-right(href="/posts/5-20-2016/bind-to-controller")
								span read more...
					////**************End bind-to-controller Post************//				


					////**************Start angular-validators Post**************////
					div.post-preview
						////Start the header//
						a(href="/posts/4-30-2016/angular-validators")
							h2.post-title Using NgModelController $validators and $asyncValidators to validate form fields
						p.post-meta By 
								a(href="/contributors#yakira") Yakira Bristol 
								|| April 30th, 2016
						hr
						h3.post-subtitle The most common way to validate form fields in angular is to look at <code>$valid</code> and <code>$invalid</code> on the fields. But what if that is not enough and you want to create special validation for your fields (i.e. validating an email against a regex or make a call to the server to validate a value)? <code>NgModelController</code> has collection of validators called <code>$validators</code> and <code>$asyncValidators</code> that can be used to create your custom field validations...
						p.post-meta-details
							i.fa.fa-tags
							| 
							a(href="/tags/angularjs") AngularJS
							|, 
							a(href="/tags/validation") Validation
							|, 
							a(href="/tags/javascript") Javascript
						p.post-meta-details
							i.fa.fa-comments
							| 
							a(href="http://refinedjs.io/posts/4-30-2016/angular-validators#disqus_thread") 
							a.pull-right(href="/posts/4-30-2016/angular-validators")
								span read more...
					////**************End angular-validators Post************//				
					

					//*
						#ui.pager
						#	li.next
						#		a(href="") Older Posts &rarr;
					//
			hr
		////Start the footer//
		include ./_inc/footer.pug
		include ./_inc/scripts.pug
